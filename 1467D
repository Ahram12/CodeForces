fn robot(n: usize, k: usize, mut weights: Vec<i64>, queries: Vec<Vec<usize>>) -> Vec<i64> {
    let mut s: Vec<Vec<i64>> = vec![vec![0; k + 1]; n];
    const MOD: i64 = 10_i64.pow(9) + 7;

    for i in 0..n {
        s[i][0] = 1;
    }

    for j in 1..=k {
        for i in 0..n {
            if i == 0 {
                s[i][j] = s[i + 1][j - 1];
            } else if i == n - 1 {
                s[i][j] = s[i - 1][j - 1];
            } else {
                s[i][j] = s[i - 1][j - 1] + s[i + 1][j - 1];
            }
            s[i][j] %= MOD;
        }
    }

    let mut t: Vec<i64> = vec![0; n];

    for i in 0..n {
        for j in 0..=k {
            if j == 0 {
                if i == 0 {
                    t[i] += if k > 0 {s[i + 1][k - 1]} else {1};
                } else {
                    if i == n - 1 {
                        t[i] += if k > 0 {s[i - 1][k - 1]} else {1};
                    } else {
                        t[i] += if k > 0 {s[i - 1][k - 1] + s[i + 1][k - 1]} else {1};
                    }
                }
            } else {
                t[i] += s[i][j]*s[i][k - j];
            }
            t[i] %= MOD;
        }
    }

    let mut sum: i64 = 0;
    for i in 0..n {
        sum += t[i] * weights[i];
        sum %= MOD;
    }

    let q = queries.len();
    let mut res: Vec<i64> = vec![0; q];

    for i in 0..q {
        sum -= t[queries[i][0] - 1]*weights[queries[i][0] - 1];
        weights[queries[i][0] - 1] = queries[i][1] as i64;
        sum += t[queries[i][0] - 1]*weights[queries[i][0] - 1];
        while sum < 0 {
            sum += MOD;
        }
        res[i] = sum % MOD;
    }

    return res
}
