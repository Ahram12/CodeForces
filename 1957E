
//CodeForces 1957E
use std::cmp;
fn carousel(n: usize) -> usize {
    let mut sieve_array: Vec<bool> = vec![true; n + 1];
    sieve_array[0] = false;
    sieve_array[1] = false;

    for i in 2..n {
        if sieve_array[i] {
            for j in (2*i..n + 1).step_by(i) {
                sieve_array[j] = false;
            }
        }
    }

    let mut sum: usize = 0;
    const MOD: usize = 10_usize.pow(9) + 7;

    for p in 2..=n {
        if p == 4 {
            if n >= 8 {
                let m = n/8;
                sum += 8*m;
                sum %= MOD;
                if n - 8*m >= 4 {
                    sum += 2*(1 +n - 8*m - 4);
                    sum %= MOD;
                }
            } else {
                if n >= 4 {
                    sum += 2*(1 +n - 4);
                    sum %= MOD;
                }
            }
        } else if sieve_array[p]  {
            let square = p * p;
            if square <= n {
                let m = n / square;
                sum += m * p * ((p*(p - 1))/2);
                sum %= MOD;
                for j in 1..p {
                    if j*p <= n -(m*square) {
                        sum += (p - j) *cmp::min(1 + n - m*square - j*p, p);
                        sum %= MOD;
                    } else {
                        break
                    }
                }
            } else {
                for j in 1..p {
                    if j*p <= n {
                        sum += (p - j)*cmp::min(1 + n - j*p, p);
                        sum %= MOD;
                    } else {
                        break
                    }
                }
            }
        }
        sum %= MOD;
    }

    return sum

}
