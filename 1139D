fn inverse(val: &i64) -> i64 {
    let mut base = *val;
    const MOD: i64 = 10_i64.pow(9) + 7;

    if base % MOD == 0 {
        return 0
    } else {
        let mut res: i64 = 1;
        let mut power: i64 = 10_i64.pow(9) + 5;

        while power > 0 {
            if power & 1 == 1 {
                res = (res * base) % MOD;
            }
            base = (base * base) % MOD;
            power >>= 1;
        }

        return res
    }
}

fn expected_length(n: usize) -> i64 {
    let mut sieve_array: Vec<bool> = vec![true; n + 1];
    sieve_array[0] = false;
    sieve_array[1] = false;
    let mut states: Vec<Vec<usize>> = vec![vec![]; n + 1];

    for i in 2..=n {
        if sieve_array[i] {
            states[i].push(i);
            for j in (2*i..n + 1).step_by(i) {
                let mut temp = j;
                while temp % i == 0 {
                    temp /= i;
                }
                if temp > 1  {
                    states[j] = states[temp].clone();
                    states[j].push(i); 
                } else {
                    states[j].push(i);
                }
                sieve_array[j] = false;
            }
        }
    }
    
    let mut total_expectation: i64 = 0;
    const MOD: i64 = 10_i64.pow(9) + 7;
    let mut s: Vec<i64> = vec![0; n + 1];
    
    for j in 2..=n {
        let mut divisors: Vec<usize> = Vec::new();
        let temp = (j as f64).sqrt() as usize;
        for i in 1..=temp {
            if j % i == 0 {
                divisors.push(i);
            }
        }
        
        for i in (0..divisors.len()).rev() {
            if j / divisors[i] != divisors[i] {
                divisors.push(j/divisors[i])
            }
        }
        
        let mut expectation = n as i64;
        let m = divisors.len();
        for d in 1..m - 1 {
            let l = states[j/divisors[d]].len();
            let mut totient: i64 = 0;
            let total: usize = n/divisors[d];
            
            for mask in 1..1<<l {
                let mut num: usize = 1;
                let mut num_bits: u32 = 0;
                for i in 0..l {
                    if mask & 1<<i != 0 {
                        num *= states[j/divisors[d]][i];
                        num_bits += 1;
                    }
                }
                totient += (total/num) as i64 * (-1_i64).pow(1 + num_bits);
            }
            
            expectation += s[divisors[d]]*(total as i64 - totient);
            expectation %= MOD;
        }
        
        s[j] = inverse(&((n - (n/j)) as i64)) * expectation;
        s[j] %= MOD;
        total_expectation += s[j];
        total_expectation %= MOD;
    }
    
    total_expectation *= inverse(&(n as i64));
    total_expectation += 1;
    total_expectation %= MOD;
    
    return total_expectation
}
